version: '3.8'

services:
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  strategy_manager:
    image: ghcr.io/${GITHUB_USERNAME}/sniper-bot:latest
    environment:
      - AGENT_TYPE=strategy_manager
      - REDIS_HOST=redis
      - AGENT_INTERVAL=300
      - LOG_LEVEL=INFO
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
    volumes:
      - strategy_data:/app/data
      - ./logs:/app/logs
    ports:
      - "8080:8080"
    depends_on:
      redis:
        condition: service_healthy
    restart: always

  sniper_agent:
    image: ghcr.io/${GITHUB_USERNAME}/sniper-bot:latest
    environment:
      - AGENT_TYPE=sniper
      - REDIS_HOST=redis
      - AGENT_INTERVAL=1  # Fast response for sniping
      - LOG_LEVEL=INFO
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
    volumes:
      - sniper_data:/app/data
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    restart: always

  market_analyzer:
    image: ghcr.io/${GITHUB_USERNAME}/sniper-bot:latest
    environment:
      - AGENT_TYPE=market_analyzer
      - REDIS_HOST=redis
      - AGENT_INTERVAL=30
      - LOG_LEVEL=INFO
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
    volumes:
      - analyzer_data:/app/data
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    restart: always

  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    ports:
      - "5000:5000"
    environment:
      - REDIS_HOST=redis
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    restart: always

volumes:
  redis_data:
  strategy_data:
  sniper_data:
  analyzer_data:

networks:
  default:
    driver: bridge 